<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HI,欢迎来到我的QQ空间（技术博客）。</title>
  <icon>https://www.gravatar.com/avatar/3add5b8cb96a1a498ffee507ab297091</icon>
  <subtitle>人生天地间，忽如远行客。</subtitle>
  <link href="https://yokii-ry.github.io/atom.xml" rel="self"/>
  
  <link href="https://yokii-ry.github.io/"/>
  <updated>2022-01-24T09:51:47.481Z</updated>
  <id>https://yokii-ry.github.io/</id>
  
  <author>
    <name>Yoki</name>
    <email>hiyokii@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【flutter】模型序列化BigDecima类型问题</title>
    <link href="https://yokii-ry.github.io/2022/01/22/uniappTemplate/"/>
    <id>https://yokii-ry.github.io/2022/01/22/uniappTemplate/</id>
    <published>2022-01-22T02:23:49.000Z</published>
    <updated>2022-01-24T09:51:47.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="uniApp框架搭建（基于vue2）"><a href="#uniApp框架搭建（基于vue2）" class="headerlink" title="uniApp框架搭建（基于vue2）"></a>uniApp框架搭建（基于vue2）</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>   这一年对自己挑战性还是很大的，接触了小程序、低代码平台搭建、微信公众号h5页面，成长了许多，但因为忙一直没时间记录，现在年末有时间抽空码码字了，<br>   下面我将把我第一次搭建uniapp框架的经验记录下来，以后可能会慢慢优化。</p><ul><li><p>1、安装uniapp<br>1.1 首先安装vue-cli环境，如已安装则可跳过此步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> install -g @vue/cli</span><br></pre></td></tr></table></figure><p>1.2 使用命令创建uniapp模板（正式版）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$vue</span> create -p dcloudio/uni-preset-vue my-project</span><br></pre></td></tr></table></figure></li><li><p>2、安装UI库<br>本项目采用的是 <code>uView</code> UI库，舍弃npm安装方式，用源码导入方式，方便改动<br><code>https://ext.dcloud.net.cn/plugin?id=6682</code><br>进入网页点击插件下载，一般解压到src路径下。</p><p>2.1 uView依赖SCSS，所以必须安装此插件，否则无法正常运行。vue-cli命令安装的务必安装。推荐使用yarn</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> // 安装node-sass</span><br><span class="line"> npm i node-sass -D</span><br><span class="line"></span><br><span class="line">// 安装sass-loader</span><br><span class="line"> npm i sass-loader -D</span><br></pre></td></tr></table></figure><p>2.2 全局配置uView</p><pre><code>2.2.1 引入uView主JS库，根据自己的路径进行调整。在项目根目录中的main.js中，引入并使用uView的JS库，注意这两行要放在import Vue之后。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uView <span class="keyword">from</span> <span class="string">&quot;./uview-ui&quot;</span>; </span><br><span class="line">Vue.use(uView);    </span><br></pre></td></tr></table></figure>2.2.2 在引入uView的全局SCSS主题文件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* uni.scss */</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">&#x27;./uview-ui/theme.scss&#x27;</span>;</span><br></pre></td></tr></table></figure>2.2.3 引入uView基础样式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/* 注意要写在第一行，同时给style标签加入lang=&quot;scss&quot;属性 */</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">&quot;./uview-ui/index.scss&quot;</span>;</span><br></pre></td></tr></table></figure>2.2.4 配置easycom组件模式(需要重启项目才生效)* 此配置需要在项目根目录的pages.json中进行。</code></pre>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// pages.json</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;easycom&quot;</span>: &#123;</span><br><span class="line">       <span class="string">&quot;^u-(.*)&quot;</span>: <span class="string">&quot;@/uview-ui/components/u-$1/u-$1.vue&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 此为本身已有的内容</span></span><br><span class="line">   <span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">       <span class="comment">// ......</span></span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>3、配置路由<br> 本项目采用的是热门插件-<a href="https://hhyang.cn/v2/">uni-simple-router</a> 搭配路由表 <a href="https://hhyang.cn/v2/tutorial/rgRoutes.html">自动构建路由表</a></p></li><li><p>4、Request:基于原生请求封装的<a href="https://www.quanzhan.co/luch-request/handbook/">luch-request</a>，进行了路由拦截。<br>   4.1 无痛刷新token</p><pre><code>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">import</span> Request <span class="keyword">from</span> <span class="string">&#x27;luch-request&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> http = <span class="keyword">new</span> Request()</span><br><span class="line">    http.interceptors.response.use(</span><br><span class="line"><span class="keyword">async</span> (response) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> err_msg = utils.path(response, <span class="string">&#x27;data.err_msg&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> err_code = utils.path(response, <span class="string">&#x27;data.err_code&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (err_msg) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (err_code) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 重新授权 无痛刷新</span></span><br><span class="line">        <span class="keyword">const</span> config = response.config</span><br><span class="line">        <span class="keyword">if</span> (!isRefresh) &#123;</span><br><span class="line">            isRefresh = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">const</span> token = utils.getStorageSync(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> getToken = UserModule.refreshToken(token)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> getToken.then(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">            config.baseURL = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">const</span> &#123; <span class="attr">data</span>: &#123; access_token &#125; &#125; = data</span><br><span class="line">            utils.setStorageSync(<span class="string">&#x27;token&#x27;</span>, access_token)</span><br><span class="line">            <span class="comment">// 已经刷新了token，将所有队列中的请求进行重试（核心代码）</span></span><br><span class="line">            retryRequest.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb(access_token))</span><br><span class="line">            retryRequest = []</span><br><span class="line">            <span class="keyword">return</span> http.request(config)</span><br><span class="line">            &#125;).catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            utils.toast(err_msg, <span class="string">&#x27;none&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">            &#125;).finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            isRefresh = <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行（核心代码）</span></span><br><span class="line">            retryRequest.push(<span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">                config.baseURL = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                utils.setStorageSync(<span class="string">&#x27;token&#x27;</span>, token)</span><br><span class="line">                resolve(http.request(config))</span><br><span class="line">            &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        utils.toast(err_msg, <span class="string">&#x27;none&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> error = response.data</span><br><span class="line">    <span class="comment">// 服务端返回的状态码不等于200，则reject()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">&#125;,</span><br><span class="line">(err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>5、格式化规范：</p><ul><li>代码规范：ESLINT、prettier。</li><li>git提交规范：husky。</li><li>提交规范：commitlint。</li></ul><p><code>.eslintrc.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">    es6: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  globals: &#123;</span><br><span class="line">    Atomics: <span class="string">&#x27;readonly&#x27;</span>,</span><br><span class="line">    SharedArrayBuffer: <span class="string">&#x27;readonly&#x27;</span>,</span><br><span class="line">    uni: <span class="literal">true</span>,</span><br><span class="line">    wx: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">extends</span>: [<span class="string">&#x27;plugin:vue/strongly-recommended&#x27;</span>, <span class="string">&#x27;@vue/standard&#x27;</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="comment">// &#x27;no-tabs&#x27;: &#x27;off&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;no-tabs&#x27;</span>: [<span class="number">2</span>, &#123; <span class="string">&#x27;allowIndentationTabs&#x27;</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-multi-spaces&#x27;</span>: <span class="number">1</span>, <span class="comment">// 禁止使用多个空格</span></span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;error&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;generator-star-spacing&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-mixed-operators&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;no-unused-expressions&#x27;</span>: <span class="number">0</span>, <span class="comment">// 禁止无用的表达式</span></span><br><span class="line">    <span class="string">&#x27;no-unused-vars&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-useless-escape&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-irregular-whitespace&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁止不规则的空白</span></span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/ban-ts-ignore&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/explicit-function-return-type&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/no-explicit-any&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/no-var-requires&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/no-empty-function&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue/custom-event-name-casing&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-use-before-define&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;space-before-function-paren&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;vue/attributes-order&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue/one-component-per-file&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue/html-closing-bracket-newline&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue/max-attributes-per-line&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue/multiline-html-element-content-newline&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue/singleline-html-element-content-newline&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue/attribute-hyphenation&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue/require-default-prop&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue/script-setup-uses-vars&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue/valid-v-model&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;vue/html-self-closing&#x27;</span>: [</span><br><span class="line">      <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        html: &#123;</span><br><span class="line">          <span class="keyword">void</span>: <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">          normal: <span class="string">&#x27;never&#x27;</span>,</span><br><span class="line">          component: <span class="string">&#x27;always&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        svg: <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">        math: <span class="string">&#x27;always&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    camelcase: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="comment">// &#x27;vue/max-attributes-per-line&#x27;: [</span></span><br><span class="line">    <span class="comment">//   &#x27;off&#x27;,</span></span><br><span class="line">    <span class="comment">//   &#123;</span></span><br><span class="line">    <span class="comment">//     singleline: 3,</span></span><br><span class="line">    <span class="comment">//     multiline: &#123;</span></span><br><span class="line">    <span class="comment">//       max: 20,</span></span><br><span class="line">    <span class="comment">//       allowFirstLine: false</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// ],</span></span><br><span class="line">    <span class="string">&#x27;vue/html-indent&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;indent&#x27;</span>: [<span class="string">&#x27;error&#x27;</span>, <span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;SwitchCase&#x27;</span>: <span class="number">1</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="comment">// &#x27;vue/attribute-hyphenation&#x27;: 0,</span></span><br><span class="line">    <span class="comment">// &#x27;vue/html-self-closing&#x27;: 0,</span></span><br><span class="line">    <span class="string">&#x27;vue/component-name-in-template-casing&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// &#x27;vue/custom-event-name-casing&#x27;: &#x27;off&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;vue/html-closing-bracket-spacing&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// &#x27;vue/singleline-html-element-content-newline&#x27;: 0,</span></span><br><span class="line">    <span class="string">&#x27;vue/no-unused-components&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// &#x27;vue/multiline-html-element-content-newline&#x27;: 0,</span></span><br><span class="line">    <span class="string">&#x27;vue/no-use-v-if-with-v-for&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// &#x27;vue/html-closing-bracket-newline&#x27;: 0,</span></span><br><span class="line">    <span class="string">&#x27;vue/no-parsing-error&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// &#x27;space-before-function-paren&#x27;: 0,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#x27;prettier.semi&#x27;: 0,</span></span><br><span class="line">    <span class="comment">// &#x27;prettier.singleQuote&#x27;: true,</span></span><br><span class="line">    quotes: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      <span class="string">&#x27;single&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        avoidEscape: <span class="literal">true</span>,</span><br><span class="line">        allowTemplateLiterals: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;semi&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// semi: [</span></span><br><span class="line">    <span class="comment">//   2,</span></span><br><span class="line">    <span class="comment">//   &#x27;never&#x27;,</span></span><br><span class="line">    <span class="comment">//   &#123;</span></span><br><span class="line">    <span class="comment">//     beforeStatementContinuationChars: &#x27;never&#x27;</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// ],</span></span><br><span class="line">    <span class="string">&#x27;no-delete-var&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;prefer-const&#x27;</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        ignoreReadBeforeAssign: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    parser: <span class="string">&#x27;babel-eslint&#x27;</span>,</span><br><span class="line">    ecmaFeatures: &#123;</span><br><span class="line">      legacyDecorators: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  overrides: [</span><br><span class="line">    &#123;</span><br><span class="line">      files: [<span class="string">&#x27;**/__tests__/*.&#123;j,t&#125;s?(x)&#x27;</span>, <span class="string">&#x27;**/tests/unit/**/*.spec.&#123;j,t&#125;s?(x)&#x27;</span>],</span><br><span class="line">      env: &#123;</span><br><span class="line">        jest: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>prettier.config</code></p><pre><code class="js">module.exports = &#123;  printWidth: 100,  tabWidth: 2,  useTabs: false,  semi: false, // 结尾分号  vueIndentScriptAndStyle: false,  singleQuote: false,  quoteProps: &#39;none&#39;,  bracketSpacing: true,  trailingComma: &#39;es5&#39;,  jsxBracketSameLine: false,  jsxSingleQuote: false,  arrowParens: &#39;always&#39;,  insertPragma: false,  requirePragma: false,  proseWrap: &#39;never&#39;,  htmlWhitespaceSensitivity: &#39;strict&#39;,  endOfLine: &#39;auto&#39;,  rangeStart: 0&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;uniApp框架搭建（基于vue2）&quot;&gt;&lt;a href=&quot;#uniApp框架搭建（基于vue2）&quot; class=&quot;headerlink&quot; title=&quot;uniApp框架搭建（基于vue2）&quot;&gt;&lt;/a&gt;uniApp框架搭建（基于vue2）&lt;/h2&gt;&lt;h4 id=&quot;前</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【h5】数据列表分类并展示</title>
    <link href="https://yokii-ry.github.io/2021/05/08/group/"/>
    <id>https://yokii-ry.github.io/2021/05/08/group/</id>
    <published>2021-05-08T03:04:59.557Z</published>
    <updated>2021-05-08T03:45:23.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据分类并展示（基于-vant）"><a href="#数据分类并展示（基于-vant）" class="headerlink" title="数据分类并展示（基于 vant）"></a>数据分类并展示（基于 vant）</h2><ul><li><p>在一些数据列表展示的需要分成几大类，例如：动物：猴子、河马。水果：香蕉、苹果。后端往往是直接返回给你一个数组，里面是一条条奖品数据，只有对应的level可以进行区分该条数据是什么种类。但往往前端展示但时候只需要展示如下效果，这时候就需要前端自己进行数据分类：</p></li><li><p>效果图：<br><img src="/img/group/demo.jpg" alt="avatar"></p></li><li><p>代码实现,里面主要是引用了lodash里面的’groupBy’方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mock数据</span></span><br><span class="line">  <span class="keyword">let</span> data = [</span><br><span class="line">           &#123;</span><br><span class="line">             cover:</span><br><span class="line">               <span class="string">&#x27;https://xxx&#x27;</span>,</span><br><span class="line">             describe: <span class="string">&#x27;我是狗狗&#x27;</span>,</span><br><span class="line">             id: <span class="number">1</span>,</span><br><span class="line">             level: <span class="string">&#x27;动物&#x27;</span>,</span><br><span class="line">             name: <span class="string">&#x27;狗狗1号&#x27;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             cover:</span><br><span class="line">               <span class="string">&#x27;https://xxx&#x27;</span>,</span><br><span class="line">             describe: <span class="string">&#x27;我也是狗狗&#x27;</span>,</span><br><span class="line">             id: <span class="number">2</span>,</span><br><span class="line">             level: <span class="string">&#x27;水果&#x27;</span>,</span><br><span class="line">             name: <span class="string">&#x27;狗狗2号&#x27;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             cover:</span><br><span class="line">               <span class="string">&#x27;https://xxx&#x27;</span>,</span><br><span class="line">             describe: <span class="string">&#x27;我是猫猫&#x27;</span>,</span><br><span class="line">             id: <span class="number">3</span>,</span><br><span class="line">             level: <span class="string">&#x27;水果&#x27;</span>,</span><br><span class="line">             name: <span class="string">&#x27;猫猫1号&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">         ]</span><br><span class="line">       <span class="comment">// 进行数据分类</span></span><br><span class="line">       <span class="keyword">const</span> groupObject = groupBy(datas, <span class="string">&#x27;level&#x27;</span>) <span class="comment">// 得到的数据是一个对象&#123;水果:[],动物:[]&#125;</span></span><br><span class="line">       <span class="built_in">this</span>.prizesList = groupObject  </span><br></pre></td></tr></table></figure></li><li><p>数据处理好之后，接下来就是循环了，也是重点。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">       <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-scratchable-game-show-item&quot;</span></span><br><span class="line">       v-<span class="keyword">for</span>=<span class="string">&quot;(levelName,index) in [&#x27;动物&#x27;,&#x27;水果&#x27;]&quot;</span></span><br><span class="line">       :key=<span class="string">&quot;index&quot;</span></span><br><span class="line">     &gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-scratchable-game-show-item-ranking&quot;</span>&gt;</span><br><span class="line">         &#123;&#123; prizesList[levelName]&amp;&amp;prizesList[levelName].length!==<span class="number">0</span>?levelName:<span class="string">&#x27;&#x27;</span> &#125;&#125;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-scratchable-game-show-item-box&quot;</span>&gt;</span><br><span class="line">         &lt;div</span><br><span class="line">           <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-scratchable-game-show-item-content&quot;</span></span><br><span class="line">           v-<span class="keyword">for</span>=<span class="string">&quot;(item,i) in prizesList[levelName]&quot;</span></span><br><span class="line">           :key=<span class="string">&quot;i&quot;</span></span><br><span class="line">         &gt;</span><br><span class="line">           &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-scratchable-game-show-item-right-icon&quot;</span> /&gt;</span><br><span class="line">           &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-scratchable-game-show-item-left-icon&quot;</span> /&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-scratchable-game-show-item-content-box&quot;</span>&gt;</span><br><span class="line">             &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-scratchable-game-img-box&quot;</span>&gt;</span><br><span class="line">               &lt;img</span><br><span class="line">                 :src=<span class="string">&quot;$utils.path(item,&#x27;cover&#x27;,&#x27;&#x27;) &quot;</span></span><br><span class="line">                 alt=<span class="string">&quot;种类图片&quot;</span></span><br><span class="line">               &gt;</span><br><span class="line">             &lt;/div&gt;</span><br><span class="line">             &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-scratchable-game-show-item-content-box-right&quot;</span>&gt;</span><br><span class="line">               &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-scratchable-game-show-item-top-icon&quot;</span> /&gt;</span><br><span class="line">               &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-scratchable-game-show-item-bottom-icon&quot;</span> /&gt;</span><br><span class="line">               &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-scratchable-game-show-item-text&quot;</span>&gt;</span><br><span class="line">                 &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-scratchable-game-show-item-name&quot;</span>&gt;</span><br><span class="line">                   &#123;&#123; $utils.path(item,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;&#x27;</span>) &#125;&#125;</span><br><span class="line">                 &lt;/div&gt;</span><br><span class="line">                 &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-scratchable-game-show-item-tip&quot;</span>&gt;</span><br><span class="line">                   &#123;&#123; $utils.path(item,<span class="string">&#x27;describe&#x27;</span>,<span class="string">&#x27;&#x27;</span>) &#125;&#125;</span><br><span class="line">                 &lt;/div&gt;</span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">             &lt;/div&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">     &lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>(levelName,index) in [‘动物’,’水果’]，这样写的原因是可以根据自己的需求来进行排序，如果不需要直接(levelName,index) in prizesList 也是可以的</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据分类并展示（基于-vant）&quot;&gt;&lt;a href=&quot;#数据分类并展示（基于-vant）&quot; class=&quot;headerlink&quot; title=&quot;数据分类并展示（基于 vant）&quot;&gt;&lt;/a&gt;数据分类并展示（基于 vant）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在一些数据</summary>
      
    
    
    
    
    <category term="js css vue 移动端 自适应" scheme="https://yokii-ry.github.io/tags/js-css-vue-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E8%87%AA%E9%80%82%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>【管理后台】动态表单创建</title>
    <link href="https://yokii-ry.github.io/2021/05/07/dynamicForm/"/>
    <id>https://yokii-ry.github.io/2021/05/07/dynamicForm/</id>
    <published>2021-05-07T09:00:19.441Z</published>
    <updated>2021-05-08T03:02:57.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态表单（基于-Ant-Design-Vue-1-x）"><a href="#动态表单（基于-Ant-Design-Vue-1-x）" class="headerlink" title="动态表单（基于 Ant Design Vue 1.x）"></a>动态表单（基于 Ant Design Vue 1.x）</h2><ul><li>1.实现以下效果<br><img src="/img/form/form1.gif" alt="avatar"></li></ul><ul><li>2.示例代码如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">  &lt;a-button</span><br><span class="line">    type=<span class="string">&quot;primary&quot;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-work-create-btn&quot;</span></span><br><span class="line">    @click=<span class="string">&quot;addDomain&quot;</span></span><br><span class="line">  &gt;</span><br><span class="line">    创建</span><br><span class="line">  &lt;/a-button&gt;</span><br><span class="line">  &lt;a-form-model</span><br><span class="line">    v-<span class="keyword">for</span>=<span class="string">&quot;(f, index) in dynamicValidateForms&quot;</span></span><br><span class="line">    :key=<span class="string">&quot;f.key&quot;</span></span><br><span class="line">    :ref=<span class="string">&quot;`dynamicValidateForms$&#123;index&#125;`&quot;</span></span><br><span class="line">    :model=<span class="string">&quot;f&quot;</span></span><br><span class="line">    v-bind=<span class="string">&quot;formItemLayout&quot;</span></span><br><span class="line">  &gt;</span><br><span class="line">     &lt;!-- 删除按键 --&gt;</span><br><span class="line">    &lt;a-icon</span><br><span class="line">      <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;dynamic-delete-button&quot;</span></span><br><span class="line">      type=<span class="string">&quot;minus-circle-o&quot;</span></span><br><span class="line">      @click=<span class="string">&quot;removeDomain(f)&quot;</span></span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;!-- 任务名称 --&gt;</span><br><span class="line">    &lt;a-form-model-item</span><br><span class="line">      :label=<span class="string">&quot;&#x27;姓名&#x27;&quot;</span></span><br><span class="line">      :prop=<span class="string">&quot;&#x27;name&#x27;&quot;</span></span><br><span class="line">      :rules=<span class="string">&quot;[</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          required: true,</span></span><br><span class="line"><span class="string">          message: &#x27;请输入姓名&#x27;,</span></span><br><span class="line"><span class="string">          trigger: &#x27;blur&#x27;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">      &lt;a-input v-model=<span class="string">&quot;f.name&quot;</span> placeholder=<span class="string">&quot;请输入姓名&quot;</span> /&gt;</span><br><span class="line">    &lt;/a-form-model-item&gt;</span><br><span class="line">    &lt;!-- 日期选择 --&gt;</span><br><span class="line">    &lt;a-form-model-item</span><br><span class="line">      :label=<span class="string">&quot;&#x27;睡觉时间&#x27;&quot;</span></span><br><span class="line">      :prop=<span class="string">&quot;&#x27;signTime&#x27;&quot;</span></span><br><span class="line">      :rules=<span class="string">&quot;[</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          required: true,</span></span><br><span class="line"><span class="string">          message: &#x27;请选择&#x27; + TimeName</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          // 自定义校验规则</span></span><br><span class="line"><span class="string">          validator: (rule, value, callback) =&gt; &#123;</span></span><br><span class="line"><span class="string">            if (value.length === 2) &#123;</span></span><br><span class="line"><span class="string">              if (!value[0] || !value[1]) &#123;</span></span><br><span class="line"><span class="string">                callback(&#x27;请选择&#x27; + TimeName)</span></span><br><span class="line"><span class="string">              &#125; else &#123;</span></span><br><span class="line"><span class="string">                // callback不传参数表示校验通过</span></span><br><span class="line"><span class="string">                callback()</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">            &#125; else &#123;</span></span><br><span class="line"><span class="string">              callback(&#x27;请选择&#x27; + TimeName)</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">      &lt;a-range-picker v-model=<span class="string">&quot;f.signTime&quot;</span> format=<span class="string">&quot;YYYY-MM-DD&quot;</span>&gt;</span><br><span class="line">        &lt;a-icon slot=<span class="string">&quot;suffixIcon&quot;</span> type=<span class="string">&quot;smile&quot;</span> /&gt;</span><br><span class="line">      &lt;/a-range-picker&gt;</span><br><span class="line">    &lt;/a-form-model-item&gt;</span><br><span class="line">    &lt;!-- 累计个数 --&gt;</span><br><span class="line">    &lt;a-form-model-item</span><br><span class="line">      v-<span class="keyword">if</span>=<span class="string">&quot;tabsSelect_index === 3 || tabsSelect_index === 4&quot;</span></span><br><span class="line">      :label=<span class="string">&quot;&#x27;水果&#x27;&quot;</span></span><br><span class="line">      :prop=<span class="string">&quot;&#x27;threshold&#x27;&quot;</span></span><br><span class="line">      :rules=<span class="string">&quot;[</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          required: true,</span></span><br><span class="line"><span class="string">          message: &#x27;请输入个数&#x27;,</span></span><br><span class="line"><span class="string">          trigger: &#x27;blur&#x27;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">      &lt;a-input</span><br><span class="line">        v-model=<span class="string">&quot;f.threshold&quot;</span></span><br><span class="line">        placeholder=<span class="string">&quot;请输入个数&quot;</span></span><br><span class="line">        suffix=<span class="string">&quot;个&quot;</span></span><br><span class="line">        @input=<span class="string">&quot;</span></span><br><span class="line"><span class="string">          e =&gt;</span></span><br><span class="line"><span class="string">            (name = validForbid(</span></span><br><span class="line"><span class="string">              e,</span></span><br><span class="line"><span class="string">              dynamicValidateForms[index],</span></span><br><span class="line"><span class="string">              &#x27;threshold&#x27;</span></span><br><span class="line"><span class="string">            ))</span></span><br><span class="line"><span class="string">        &quot;</span></span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/a-form-model-item&gt;</span><br><span class="line">    &lt;!-- 维生素--&gt;</span><br><span class="line">    &lt;a-form-model-item</span><br><span class="line">      :label=<span class="string">&quot;&#x27;可获得&#x27;&quot;</span></span><br><span class="line">      :prop=<span class="string">&quot;&#x27;lucky_value&#x27;&quot;</span></span><br><span class="line">      :rules=<span class="string">&quot;[</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          required: true,</span></span><br><span class="line"><span class="string">          message: &#x27;请输入维生素&#x27;,</span></span><br><span class="line"><span class="string">          trigger: &#x27;blur&#x27;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">      &lt;a-input</span><br><span class="line">        v-model=<span class="string">&quot;f.lucky_value&quot;</span></span><br><span class="line">        placeholder=<span class="string">&quot;请输入维生素&quot;</span></span><br><span class="line">        suffix=<span class="string">&quot;维生素&quot;</span></span><br><span class="line">        @input=<span class="string">&quot;</span></span><br><span class="line"><span class="string">          e =&gt;</span></span><br><span class="line"><span class="string">            (name = validForbid(</span></span><br><span class="line"><span class="string">              e,</span></span><br><span class="line"><span class="string">              dynamicValidateForms[index],</span></span><br><span class="line"><span class="string">              &#x27;lucky_value&#x27;</span></span><br><span class="line"><span class="string">            ))</span></span><br><span class="line"><span class="string">        &quot;</span></span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/a-form-model-item&gt;</span><br><span class="line">    &lt;!-- 说明文案 --&gt;</span><br><span class="line">    &lt;a-form-model-item</span><br><span class="line">      :label=<span class="string">&quot;&#x27;说明文案&#x27;&quot;</span></span><br><span class="line">      :prop=<span class="string">&quot;&#x27;body&#x27;&quot;</span></span><br><span class="line">      :rules=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">        required: true,</span></span><br><span class="line"><span class="string">        message: &#x27;请输入说明文案&#x27;,</span></span><br><span class="line"><span class="string">        trigger: &#x27;blur&#x27;</span></span><br><span class="line"><span class="string">      &#125;&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">      &lt;a-input v-model=<span class="string">&quot;f.body&quot;</span> placeholder=<span class="string">&quot;请输入说明文案&quot;</span> /&gt;</span><br><span class="line">    &lt;/a-form-model-item&gt;</span><br><span class="line">    &lt;a-divider /&gt;</span><br><span class="line">  &lt;/a-form-model&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意：因为是直接创建一个动态表单，所以ref需要是唯一的，可用循环出来的index进行拼接达到，如果需要初始化有一个默认表单，则需要在初始化的时候初始一个对象push到dynamicValidateForms这个数组里面。</strong></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;动态表单（基于-Ant-Design-Vue-1-x）&quot;&gt;&lt;a href=&quot;#动态表单（基于-Ant-Design-Vue-1-x）&quot; class=&quot;headerlink&quot; title=&quot;动态表单（基于 Ant Design Vue 1.x）&quot;&gt;&lt;/a&gt;动态表单（</summary>
      
    
    
    
    
    <category term="js css vue 移动端 自适应" scheme="https://yokii-ry.github.io/tags/js-css-vue-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E8%87%AA%E9%80%82%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>【移动端】postcss-pxtorem搭配监听resize事件实现各机型自适应</title>
    <link href="https://yokii-ry.github.io/2021/03/04/rem/"/>
    <id>https://yokii-ry.github.io/2021/03/04/rem/</id>
    <published>2021-03-04T02:13:07.000Z</published>
    <updated>2022-01-22T02:24:22.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先配置rem（vue2-6-11、vue-cli4x版本的环境）："><a href="#首先配置rem（vue2-6-11、vue-cli4x版本的环境）：" class="headerlink" title="首先配置rem（vue2.6.11、vue-cli4x版本的环境）："></a>首先配置rem（vue2.6.11、vue-cli4x版本的环境）：</h2><ul><li><ol><li><p>安装 <em>postcss-pxtorem</em></p><p><code>npm i postcss-pxtorem</code></p></li></ol></li><li><ol start="2"><li>打开vue.config.js文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滑到css相关配置地方</span></span><br><span class="line">loaderOptions:&#123;</span><br><span class="line">  postcss:&#123;</span><br><span class="line">      <span class="built_in">require</span>(<span class="string">&#x27;postcss-pxtorem&#x27;</span>)(&#123;</span><br><span class="line">            rootValue: <span class="number">16</span>, <span class="comment">//根大小</span></span><br><span class="line">            minPixelValue: <span class="number">2</span>,</span><br><span class="line">            propList: [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line">          &#125;)</span><br><span class="line">        ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><ol start="3"><li><p>创建一个rem.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基准大小</span></span><br><span class="line"><span class="keyword">const</span> baseSize = <span class="number">32</span></span><br><span class="line"><span class="comment">// 设置 rem 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setRem</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前页面宽度相对于 750 宽的缩放比例，可根据自己需要修改。</span></span><br><span class="line">  <span class="keyword">const</span> scale = <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">750</span></span><br><span class="line">  <span class="comment">// 设置页面根节点字体大小</span></span><br><span class="line">  <span class="built_in">document</span>.documentElement.style.fontSize = (baseSize * <span class="built_in">Math</span>.min(scale, <span class="number">2</span>)) + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">setRem()</span><br><span class="line"><span class="comment">// 改变窗口大小时重新设置 rem</span></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  setRem()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="4"><li><p>在main.js里面引入rem：</p><p><code>import &#39;./util/rem&#39;</code></p></li></ol></li><li><p>最后在写样式的时候可直接写px单位，编译后会自动转化成rem，在浏览器检查元素的时候可以看到全部已经变成rem单位。</p></li></ul><hr><h4 id="因为登录页面被设计成不能上下滚动出现进度条的原因，导致以下问题："><a href="#因为登录页面被设计成不能上下滚动出现进度条的原因，导致以下问题：" class="headerlink" title="因为登录页面被设计成不能上下滚动出现进度条的原因，导致以下问题："></a>因为登录页面被设计成不能上下滚动出现进度条的原因，导致以下问题：</h4><p>*登录页面下面有个登录按钮模块,该按钮是采用绝对定位到最下边的：</p><p><img src="/img/rem/rem1.jpg" alt="avatar"></p><p>*在调试过程中出现以下几个问题：</p><p>1.在小机型尺寸的时候的时候 (<em>max-width</em>: 360px) and (<em>min-height</em>: 480px) and (<em>max-height</em>: 666px)出现按钮覆盖它的上一个div块，例如下图所示：</p><p><img src="/img/rem/rem2.jpg" alt="avatar"></p><p>解决方案：用媒体查询调整整体间距大小。</p><p>2.在安卓机型聚焦密码框输入的时候底下登录按钮元素块会直接被键盘顶到上面导致密码框被覆盖住</p><p>解决方案：1.监听resize事件，获取当前可见屏幕的高度给body赋值高度：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> h = <span class="built_in">document</span>.documentElement.clientHeight||<span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">body.setyle.height=h-<span class="number">26</span>+<span class="string">&quot;px&quot;</span> <span class="comment">// 为什么减26，因为给最下面留点间距，不至于直接贴边。</span></span><br><span class="line"><span class="keyword">if</span> (body.style.height &gt; <span class="number">568</span> &lt; <span class="number">810</span>) body.style.height = h - <span class="number">10</span> + <span class="string">&#x27;px&#x27;</span> <span class="comment">//这个是兼容iphone8p这一类的机型，避免高度太矮给覆盖上个元素块，像iphoneX这类屏幕下面需要安全区的就要用媒体查询配置按钮定位bottom值了。</span></span><br></pre></td></tr></table></figure><p>​               2.监听resize事件，滚动到当前活动元素的地方，下面按钮也不会因为长度不够被挤上来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.activeElement.scrollIntoView(&#123;<span class="attr">behavior</span>:<span class="string">&#x27;smooth&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><ul><li>解决完这个问题后，发现另外一个问题，就是浏览器默认字体最小到12px，但是在某些小机型上，字体12px还是会大而从一行变成两行</li></ul><p>解决方案：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.媒体查询此机型范围内的时候，给文本设置行内块属性（因为要使用<span class="attribute">transform</span>），因为我用的是<span class="selector-tag">span</span>标签包裹的，在给个能使文字变成一行的宽度， 在把这个元素缩小，就能实现视觉更小的文字效果啦～</span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="comment">/*防止字体变小但还是无法换行原因 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.8</span>, <span class="number">0.8</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><p>*next，bug只会越改越多（狗头</p><ul><li>在做以下效果的时候，不同机型右边的图标会往下沉。</li></ul><p>解决方案：开始写的时候是用flex布局居中的，后来换成了左浮动加相对定位实现的：图标和文本共有的大盒子，这三个元素都要加上左浮动，并且文本还要设置与当前高度相同的行高。大盒子通过 <em>position</em>: relative; <em>left</em>: 50%; transform(translate(-50%,0))</p><p><img src="/img/rem/rem3.jpg" alt="avatar"></p><hr><ul><li><p>最后一个（最好是</p></li><li><p>在安卓机型或浏览器一些模拟机上，boder-radius：50%并不会呈现一个圆形而是一个棱角稍微有弧度一点的图形，如下图所示：</p></li></ul><p><img src="/img/rem/rem4.jpg" alt="avatar"></p><p>解决方案：先设置相比设计图十倍的宽和高，再使用transform:scale属性缩小十倍就可以了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.circle&#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    transform:scale(<span class="number">0.1</span>) <span class="comment">// 缩小十倍</span></span><br><span class="line">    transform-origin:<span class="number">0</span>% center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*伪元素必须这样，如果是一个行内块元素就只需要设置border-radius:50% 50%;也可以解决这个问题*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;首先配置rem（vue2-6-11、vue-cli4x版本的环境）：&quot;&gt;&lt;a href=&quot;#首先配置rem（vue2-6-11、vue-cli4x版本的环境）：&quot; class=&quot;headerlink&quot; title=&quot;首先配置rem（vue2.6.11、vue-cl</summary>
      
    
    
    
    
    <category term="js css vue 移动端 自适应" scheme="https://yokii-ry.github.io/tags/js-css-vue-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E8%87%AA%E9%80%82%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>【模块化】export与export default在一个文件里共存，引入时需注意的地方</title>
    <link href="https://yokii-ry.github.io/2021/03/02/module/"/>
    <id>https://yokii-ry.github.io/2021/03/02/module/</id>
    <published>2021-03-02T12:13:38.556Z</published>
    <updated>2021-03-04T08:02:19.369Z</updated>
    
    <content type="html"><![CDATA[<p><strong>export 与 export default</strong><br>   <em>export在同一个文件中可存在多个：</em></p><ul><li>export default在同一个文件中只可存在一个（一个模块只能有一个默认输出）：*<br><img src="/img/muduleImg/img1.png"></li></ul><p><strong>引入的区别</strong><br>   <em>引入的时候 export加{} 而export default可定义为随便一个名称</em><br>      <img src="/img/muduleImg/img2.png"></p><pre><code>还可以import a,&#123;arr,obj&#125; from &#39;./test.js&#39;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;export 与 export default&lt;/strong&gt;&lt;br&gt;   &lt;em&gt;export在同一个文件中可存在多个：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;export default在同一个文件中只可存在一个（一个模块只能有一个默认输出）：*&lt;br&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【mac环境】zsh:command not found：</title>
    <link href="https://yokii-ry.github.io/2021/03/02/zsh/"/>
    <id>https://yokii-ry.github.io/2021/03/02/zsh/</id>
    <published>2021-03-02T12:10:28.604Z</published>
    <updated>2021-03-04T08:02:40.962Z</updated>
    
    <content type="html"><![CDATA[<p>近段时间从window换到mac系统，随之而来的问题接踵而来：全局安装了yarn、webpack等全局包，从开始没权限到安装成功，以为成功了，但是一执行yarn等相关命令却报 zsh: command not found: xx，到网上看了n多教程，终于尝试n次成功了，如果你试了网上n多教程没用，看看这篇比较详细又简单的教程，说不定能帮到你：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">MAC bookPro出现zsh: <span class="built_in">command</span> not found: xxx解决方法：</span><br><span class="line"></span><br><span class="line">把 bash shell 中.bash_profile 全部环境变量加入zsh shell里就好</span><br><span class="line"></span><br><span class="line">step1:</span><br><span class="line"></span><br><span class="line">Term执行</span><br><span class="line"></span><br><span class="line">open .zshrc</span><br><span class="line"></span><br><span class="line">step2:</span><br><span class="line"></span><br><span class="line">在弹出的编辑器最下面</span><br><span class="line"></span><br><span class="line">加入</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> .bash_profile</span><br><span class="line"></span><br><span class="line">看哪个奏效，这一步就在zshrc执行时将 .bash_profile 全部环境变量加入zsh shell了</span><br><span class="line"></span><br><span class="line">保存</span><br><span class="line"></span><br><span class="line">step3:</span><br><span class="line"></span><br><span class="line">terminal执行</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> .zshrc              更新配置</span><br><span class="line"></span><br><span class="line">如果到此你已经解决了问题，那恭喜你了，可题主我就没这么幸运，我在terminal执行<span class="built_in">source</span> .zshrc时报找不到bash_profile，坑爹的有些mac就是没有bash_profile这个文件，需要手动新建，如果你也是这样请继续跟我操作</span><br><span class="line"></span><br><span class="line">step:1</span><br><span class="line"></span><br><span class="line">terminal执行</span><br><span class="line"></span><br><span class="line">touch .bash_profile         创建.bash_profile </span><br><span class="line"></span><br><span class="line">这时候就有了bash_profile这个文件，当然是没有内容的空文件，这里又需要你写入path，我接下来是这么操作的</span><br><span class="line"></span><br><span class="line">step:2</span><br><span class="line"></span><br><span class="line">创建global安装任务的目录</span><br><span class="line"></span><br><span class="line">mkdir ~/.npm-global</span><br><span class="line"></span><br><span class="line">step:3</span><br><span class="line"></span><br><span class="line">配置npm全局下载时，下载到新的地址目录</span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&#x27;~/.npm-global&#x27;</span></span><br><span class="line"></span><br><span class="line">至此你再npm i xxx -g就会存储到npm-global的地址下了</span><br><span class="line"></span><br><span class="line">step:4</span><br><span class="line"></span><br><span class="line">open .bash_profile</span><br><span class="line"></span><br><span class="line">在弹出的编辑器中增加配置</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=~/.npm-global/bin:<span class="variable">$&#123;PATH&#125;</span></span><br><span class="line"></span><br><span class="line">保存</span><br><span class="line"></span><br><span class="line">step:5</span><br><span class="line"></span><br><span class="line">terminal执行</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> .bash_profile    更新配置</span><br><span class="line"></span><br><span class="line">至此解决问题</span><br><span class="line"></span><br><span class="line">出处:https://www.jianshu.com/p/64c175476acc。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;近段时间从window换到mac系统，随之而来的问题接踵而来：全局安装了yarn、webpack等全局包，从开始没权限到安装成功，以为成功了，但是一执行yarn等相关命令却报 zsh: command not found: xx，到网上看了n多教程，终于尝试n次成功了，如果</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【uniapp】兼容刘海屏底部安全区</title>
    <link href="https://yokii-ry.github.io/2021/03/02/uniappSafe/"/>
    <id>https://yokii-ry.github.io/2021/03/02/uniappSafe/</id>
    <published>2021-03-02T12:07:17.602Z</published>
    <updated>2021-03-04T08:02:36.856Z</updated>
    
    <content type="html"><![CDATA[<p><strong>因为iphoneX等机型最下面会有条黑色等线，导致按钮等元素被遮住部分，所以设置安全区边距会往上提，如果不是刘海屏则保持原来样式。（注：在小程序模拟器上不生效，以真机为准。）</strong></p><p><em>iOS方案一：使用原生占位（仅App端支持）</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">manifest.json 文件 app-plus 节点下配下 safearea</span><br><span class="line"><span class="string">&quot;safearea&quot;</span>: &#123;  </span><br><span class="line">    <span class="string">&quot;background&quot;</span>: <span class="string">&quot;#CCCCCC&quot;</span>,  </span><br><span class="line">    <span class="string">&quot;bottom&quot;</span>: &#123;  </span><br><span class="line">        <span class="string">&quot;offset&quot;</span>: <span class="string">&quot;auto&quot;</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>iOS方案二：不使用原生占位（非App端可以不配置manifest</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;safearea&quot;</span>: &#123;  </span><br><span class="line">    <span class="string">&quot;bottom&quot;</span>: &#123;  </span><br><span class="line">        <span class="string">&quot;offset&quot;</span>: <span class="string">&quot;none&quot;</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>在你需要调大边距的盒子添加以下样式</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;  </span><br><span class="line">  padding-bottom: <span class="number">0</span>;  </span><br><span class="line">  padding-bottom: constant(safe-area-inset-bottom);  </span><br><span class="line">  padding-bottom: env(safe-area-inset-bottom);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;因为iphoneX等机型最下面会有条黑色等线，导致按钮等元素被遮住部分，所以设置安全区边距会往上提，如果不是刘海屏则保持原来样式。（注：在小程序模拟器上不生效，以真机为准。）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;iOS方案一：使用原生占位（仅App端支持</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【js】根据总数和指定区分基数划分的数组递增区间：如[1-50,51-100,101-101]</title>
    <link href="https://yokii-ry.github.io/2020/05/06/exportgroup/"/>
    <id>https://yokii-ry.github.io/2020/05/06/exportgroup/</id>
    <published>2020-05-06T11:10:07.000Z</published>
    <updated>2021-03-05T01:45:10.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最近项目里用到一导出功能，但是后端并没有做文件流，只给我了json数据，所以是纯前端导出excel表格，其中有一个需求是根据总条数来做成以一个特定基数为准的递增数组区间，如下图所示："><a href="#最近项目里用到一导出功能，但是后端并没有做文件流，只给我了json数据，所以是纯前端导出excel表格，其中有一个需求是根据总条数来做成以一个特定基数为准的递增数组区间，如下图所示：" class="headerlink" title="最近项目里用到一导出功能，但是后端并没有做文件流，只给我了json数据，所以是纯前端导出excel表格，其中有一个需求是根据总条数来做成以一个特定基数为准的递增数组区间，如下图所示："></a>最近项目里用到一导出功能，但是后端并没有做文件流，只给我了json数据，所以是纯前端导出excel表格，其中有一个需求是根据总条数来做成以一个特定基数为准的递增数组区间，如下图所示：</h2><p><img src="/img/exportImg/demo.jpg" alt="avatar"><br>   感谢小组长大大哥帮我优化代码！！！牛逼！！特此记录一下！！<br>   代码实现：<br>   （注：total 为数据总条数，limit 为区分基数，上图是以total为7、limit为3的效果）</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">     spiltItems () &#123;</span><br><span class="line">        <span class="keyword">const</span> limit = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">const</span> total = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">const</span> arr = []</span><br><span class="line">        <span class="keyword">const</span> items = <span class="built_in">Math</span>.ceil(total / limit)</span><br><span class="line">        <span class="keyword">const</span> remain = total % limit</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items; i++) &#123;</span><br><span class="line">        arr.push(&#123;</span><br><span class="line">       index: i + <span class="number">1</span>,</span><br><span class="line">         label:<span class="number">1</span> + i * limit + <span class="string">&#x27;-&#x27;</span> +(i &lt; items - <span class="number">1</span> ? (i + <span class="number">1</span>) * limit : i * limit + remain) + <span class="string">&#x27;条&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">       <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;最近项目里用到一导出功能，但是后端并没有做文件流，只给我了json数据，所以是纯前端导出excel表格，其中有一个需求是根据总条数来做成以一个特定基数为准的递增数组区间，如下图所示：&quot;&gt;&lt;a href=&quot;#最近项目里用到一导出功能，但是后端并没有做文件流，只给我了</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【js】Promise.all食用指南</title>
    <link href="https://yokii-ry.github.io/2020/04/28/promise/"/>
    <id>https://yokii-ry.github.io/2020/04/28/promise/</id>
    <published>2020-04-28T07:00:07.000Z</published>
    <updated>2021-03-05T01:44:43.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我之前看Promise，里面有个方法叫all，因为接口是异步的，当你的业务必须拿到几个不同接口的所有数据后，再进行比较或者逻辑操作，这个时候就可以用到这个方法。此处贴上示例代码，是以Vue2为框架的背景下："><a href="#我之前看Promise，里面有个方法叫all，因为接口是异步的，当你的业务必须拿到几个不同接口的所有数据后，再进行比较或者逻辑操作，这个时候就可以用到这个方法。此处贴上示例代码，是以Vue2为框架的背景下：" class="headerlink" title="我之前看Promise，里面有个方法叫all，因为接口是异步的，当你的业务必须拿到几个不同接口的所有数据后，再进行比较或者逻辑操作，这个时候就可以用到这个方法。此处贴上示例代码，是以Vue2为框架的背景下："></a>我之前看Promise，里面有个方法叫all，因为接口是异步的，当你的业务必须拿到几个不同接口的所有数据后，再进行比较或者逻辑操作，这个时候就可以用到这个方法。此处贴上示例代码，是以Vue2为框架的背景下：</h2>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 搭配async await 进一步优化</span></span><br><span class="line"> <span class="comment">// 接口1</span></span><br><span class="line"> <span class="keyword">async</span> <span class="function"><span class="title">getA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// return一个Promise实例对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.API1().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">           resolve(res)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(error)</span><br><span class="line">   &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">// 接口2</span></span><br><span class="line"> <span class="keyword">async</span> <span class="function"><span class="title">getB</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// return一个Promise实例对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.API1().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">           resolve(res)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(error)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="string">`promise.all是等待所有异步资源加载完毕后再执行代码。`</span></span><br><span class="line"> <span class="comment">// 参数是一个数组，数组里面是一个个接口方法调用</span></span><br><span class="line"> <span class="comment">// 注意：如果有一个接口失败都不能成功返回</span></span><br><span class="line">getPromiseAll([<span class="built_in">this</span>.getA(),<span class="built_in">this</span>.getB()]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)  <span class="comment">//  [&#123;data:&#123;...&#125;&#125;,&#123;data:&#123;...&#125;&#125;]  返回一个数组，数组的元素代表不同接口的响应数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;我之前看Promise，里面有个方法叫all，因为接口是异步的，当你的业务必须拿到几个不同接口的所有数据后，再进行比较或者逻辑操作，这个时候就可以用到这个方法。此处贴上示例代码，是以Vue2为框架的背景下：&quot;&gt;&lt;a href=&quot;#我之前看Promise，里面有个方</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【js】for与for...in、for Each和map和for of</title>
    <link href="https://yokii-ry.github.io/2020/04/10/for/"/>
    <id>https://yokii-ry.github.io/2020/04/10/for/</id>
    <published>2020-04-10T08:00:07.000Z</published>
    <updated>2021-03-05T01:44:19.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="for与for…in的区别"><a href="#for与for…in的区别" class="headerlink" title="for与for…in的区别:"></a>for与for…in的区别:</h2><h3 id="1、相同点-for-能遍历有固定长度和固定次数的数组等。for-in-也能遍历数组-但也能遍历对象。"><a href="#1、相同点-for-能遍历有固定长度和固定次数的数组等。for-in-也能遍历数组-但也能遍历对象。" class="headerlink" title="1、相同点:for 能遍历有固定长度和固定次数的数组等。for...in 也能遍历数组,但也能遍历对象。"></a>1、相同点:<code>for</code> 能遍历有固定长度和固定次数的数组等。<code>for...in</code> 也能遍历数组,但也能遍历对象。</h3><h3 id="for-var-k-in-数组名-k-key-下标"><a href="#for-var-k-in-数组名-k-key-下标" class="headerlink" title="for(var k in 数组名) //k=key(下标)"></a>for(var k in 数组名) //k=key(下标)</h3><h3 id="2、不同点-for-是根据数据的长度来执行次数-empty-空-也会执行。而for-in则会根据数据内容来执行次数-empty会跳过不执行。"><a href="#2、不同点-for-是根据数据的长度来执行次数-empty-空-也会执行。而for-in则会根据数据内容来执行次数-empty会跳过不执行。" class="headerlink" title="2、不同点:for 是根据数据的长度来执行次数,empty(空)也会执行。而for..in则会根据数据内容来执行次数,empty会跳过不执行。"></a>2、不同点:<code>for</code> 是根据数据的长度来执行次数,<code>empty</code>(空)也会执行。而<code>for..in</code>则会根据数据内容来执行次数,<code>empty</code>会跳过不执行。</h3><h4 id="遍历数组或对象时优先使用for-in"><a href="#遍历数组或对象时优先使用for-in" class="headerlink" title="遍历数组或对象时优先使用for...in"></a>遍历数组或对象时优先使用<code>for...in</code></h4><h5 id="1-for-each只做遍历-无返回值-打印是undifined-仅仅只是做遍历功能"><a href="#1-for-each只做遍历-无返回值-打印是undifined-仅仅只是做遍历功能" class="headerlink" title="1.for each只做遍历,无返回值,打印是undifined,仅仅只是做遍历功能;"></a>1.for each只做遍历,无返回值,打印是undifined,仅仅只是做遍历功能;</h5><h5 id="2-map也可以用于数组遍历-可以返回一个数组-但是一定要return"><a href="#2-map也可以用于数组遍历-可以返回一个数组-但是一定要return" class="headerlink" title="2.map也可以用于数组遍历,可以返回一个数组,但是一定要return;"></a>2.map也可以用于数组遍历,可以返回一个数组,但是一定要return;</h5><pre><code class="js">//for of 遍历数组,不能遍历对象for let k of arr.keys() //获得键;for let v of arr.values()//获得值;for let[k,v] of arr.entries//同时获得键和值;//for of 遍历对象for (let k of object.keys(obj))//获得对象的键;for (let v of object.values(obj)) //获得对象的值;for (let v of object.entries(obj)) //获得对象的键和值;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;for与for…in的区别&quot;&gt;&lt;a href=&quot;#for与for…in的区别&quot; class=&quot;headerlink&quot; title=&quot;for与for…in的区别:&quot;&gt;&lt;/a&gt;for与for…in的区别:&lt;/h2&gt;&lt;h3 id=&quot;1、相同点-for-能遍历有固定长度和</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【flutter】模型序列化BigDecima类型问题</title>
    <link href="https://yokii-ry.github.io/2020/03/22/bigDecima/"/>
    <id>https://yokii-ry.github.io/2020/03/22/bigDecima/</id>
    <published>2020-03-22T14:00:07.000Z</published>
    <updated>2021-03-05T01:43:05.770Z</updated>
    
    <content type="html"><![CDATA[<h4 id="之前在做公司flutter项目时候，与后端联调中，发现有一段代码逻辑并没有进入执行，但是终端也没报-错，然后打点debug发现是建立模型序列化的时候，flutter对BigDecima类型不支持识别，自动为int类型。"><a href="#之前在做公司flutter项目时候，与后端联调中，发现有一段代码逻辑并没有进入执行，但是终端也没报-错，然后打点debug发现是建立模型序列化的时候，flutter对BigDecima类型不支持识别，自动为int类型。" class="headerlink" title="之前在做公司flutter项目时候，与后端联调中，发现有一段代码逻辑并没有进入执行，但是终端也没报  错，然后打点debug发现是建立模型序列化的时候，flutter对BigDecima类型不支持识别，自动为int类型。"></a>之前在做公司flutter项目时候，与后端联调中，发现有一段代码逻辑并没有进入执行，但是终端也没报  错，然后打点debug发现是建立模型序列化的时候，flutter对BigDecima类型不支持识别，自动为int类型。</h4><h4 id="解决方法：把int类型换成num类型就完美解决，但是后端要跟前端标明此类型是BigDecima，一般涉及到计算的数字都会使用这个类型"><a href="#解决方法：把int类型换成num类型就完美解决，但是后端要跟前端标明此类型是BigDecima，一般涉及到计算的数字都会使用这个类型" class="headerlink" title="解决方法：把int类型换成num类型就完美解决，但是后端要跟前端标明此类型是BigDecima，一般涉及到计算的数字都会使用这个类型"></a>解决方法：把int类型换成num类型就完美解决，但是后端要跟前端标明此类型是BigDecima，一般涉及到计算的数字都会使用这个类型</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;之前在做公司flutter项目时候，与后端联调中，发现有一段代码逻辑并没有进入执行，但是终端也没报-错，然后打点debug发现是建立模型序列化的时候，flutter对BigDecima类型不支持识别，自动为int类型。&quot;&gt;&lt;a href=&quot;#之前在做公司flutt</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【js】一次性切割字符串两种以上符号的方法</title>
    <link href="https://yokii-ry.github.io/2020/02/28/stringSplit/"/>
    <id>https://yokii-ry.github.io/2020/02/28/stringSplit/</id>
    <published>2020-02-28T14:00:07.000Z</published>
    <updated>2021-03-05T01:42:41.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这段时间在做项目的时候，跟后端对接发现我这里实现需要切割两次不同的符号，但是我觉得分两次切割太冗余了代码，所以我想着如果能一次性切割完就更好了，发现还真有这种办法，话不多说，上代码："><a href="#这段时间在做项目的时候，跟后端对接发现我这里实现需要切割两次不同的符号，但是我觉得分两次切割太冗余了代码，所以我想着如果能一次性切割完就更好了，发现还真有这种办法，话不多说，上代码：" class="headerlink" title="这段时间在做项目的时候，跟后端对接发现我这里实现需要切割两次不同的符号，但是我觉得分两次切割太冗余了代码，所以我想着如果能一次性切割完就更好了，发现还真有这种办法，话不多说，上代码："></a>这段时间在做项目的时候，跟后端对接发现我这里实现需要切割两次不同的符号，但是我觉得分两次切割太冗余了代码，所以我想着如果能一次性切割完就更好了，发现还真有这种办法，话不多说，上代码：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;IOS,https://xxxxxx.com&amp;ANDRIOD,https://xxxxxx.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line">str.split(<span class="string">&#x27;/[,&amp;]/&#x27;</span>) <span class="comment">//以正则的方式，里面以一个数组的形式存放你想分割的标识符。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str) <span class="comment">//[&quot;IOS&quot;, &quot;https://xxxxxx.com&quot;, &quot;ANDRIOD&quot;, &quot;https://xxxxxx.com&quot;]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;这段时间在做项目的时候，跟后端对接发现我这里实现需要切割两次不同的符号，但是我觉得分两次切割太冗余了代码，所以我想着如果能一次性切割完就更好了，发现还真有这种办法，话不多说，上代码：&quot;&gt;&lt;a href=&quot;#这段时间在做项目的时候，跟后端对接发现我这里实现需要切割两</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【css】轮播图切换抖动，使跑马灯文字模糊</title>
    <link href="https://yokii-ry.github.io/2020/02/21/banner/"/>
    <id>https://yokii-ry.github.io/2020/02/21/banner/</id>
    <published>2020-02-21T09:25:11.000Z</published>
    <updated>2021-03-05T01:42:18.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="该项目是移动端：vue搭配vantUI"><a href="#该项目是移动端：vue搭配vantUI" class="headerlink" title="该项目是移动端：vue搭配vantUI"></a>该项目是移动端：vue搭配vantUI</h1><h2 id="害，今天做移动端项目的时候发现跑马灯隔一下就会上下跳动模糊一秒，检查了下，发现去掉轮播图就没有这种bug了，然后就一直对着轮播图进行样式修改："><a href="#害，今天做移动端项目的时候发现跑马灯隔一下就会上下跳动模糊一秒，检查了下，发现去掉轮播图就没有这种bug了，然后就一直对着轮播图进行样式修改：" class="headerlink" title="害，今天做移动端项目的时候发现跑马灯隔一下就会上下跳动模糊一秒，检查了下，发现去掉轮播图就没有这种bug了，然后就一直对着轮播图进行样式修改："></a>害，今天做移动端项目的时候发现跑马灯隔一下就会上下跳动模糊一秒，检查了下，发现去掉轮播图就没有这种bug了，然后就一直对着轮播图进行样式修改：</h2><h3 id="1、给轮播图每一项固定高度"><a href="#1、给轮播图每一项固定高度" class="headerlink" title="1、给轮播图每一项固定高度."></a>1、给轮播图每一项固定高度.</h3><h3 id="2、给父级盒子overflow-hidden"><a href="#2、给父级盒子overflow-hidden" class="headerlink" title="2、给父级盒子overflow:hidden;"></a>2、给父级盒子overflow:hidden;</h3>   <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.swiperBox</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、给轮播图下面的元素一个padding-top值。都没用-终于给轮播图的父元素一个属性就搞定"><a href="#3、给轮播图下面的元素一个padding-top值。都没用-终于给轮播图的父元素一个属性就搞定" class="headerlink" title="3、给轮播图下面的元素一个padding-top值。都没用,终于给轮播图的父元素一个属性就搞定:"></a>3、给轮播图下面的元素一个padding-top值。都没用,终于给轮播图的父元素一个属性就搞定:</h3>   <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.swiperBox</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">translateZ</span>(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;该项目是移动端：vue搭配vantUI&quot;&gt;&lt;a href=&quot;#该项目是移动端：vue搭配vantUI&quot; class=&quot;headerlink&quot; title=&quot;该项目是移动端：vue搭配vantUI&quot;&gt;&lt;/a&gt;该项目是移动端：vue搭配vantUI&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【vue】路由传参 query 和 params</title>
    <link href="https://yokii-ry.github.io/2020/02/18/vue-route/"/>
    <id>https://yokii-ry.github.io/2020/02/18/vue-route/</id>
    <published>2020-02-18T00:02:07.000Z</published>
    <updated>2021-03-05T01:41:46.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue路由传参分为两种情况："><a href="#vue路由传参分为两种情况：" class="headerlink" title="vue路由传参分为两种情况："></a>vue路由传参分为两种情况：</h2><h3 id="一、query和params传参的区别："><a href="#一、query和params传参的区别：" class="headerlink" title="一、query和params传参的区别："></a>一、query和params传参的区别：</h3><p>1、query传参显示参数，params传参不显示参数。</p><p>2、取值方法也有不同：query取值：this.$route.query.XXX || this.$route.params.xxx</p><p>3、query传值页面刷新数据还在，而params传值页面数据消失。</p><h3 id="二、各自写法："><a href="#二、各自写法：" class="headerlink" title="二、各自写法："></a>二、各自写法：</h3><h3 id="query传参"><a href="#query传参" class="headerlink" title="query传参"></a>query传参</h3><p>组件写法(help.vue)：</p><h5 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h5><p><img src="/img/vueRouter/router1.png" alt="avatar"></p><h5 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h5><p><img src="/img/vueRouter/router2.png" alt="avatar"></p><h5 id="接受写法（home-vue）"><a href="#接受写法（home-vue）" class="headerlink" title="接受写法（home.vue）:"></a>接受写法（home.vue）:</h5><p><img src="/img/vueRouter/router3.png" alt="avatar"></p><h5 id="页面渲染（home-vue）"><a href="#页面渲染（home-vue）" class="headerlink" title="页面渲染（home.vue）:"></a>页面渲染（home.vue）:</h5><p><img src="/img/vueRouter/router4.png" alt="avatar"></p><h5 id="query参数赋值到data："><a href="#query参数赋值到data：" class="headerlink" title="query参数赋值到data："></a>query参数赋值到data：</h5><p><img src="/img/vueRouter/router5.png" alt="avatar"></p><h4 id="params："><a href="#params：" class="headerlink" title="params："></a>params：</h4><h6 id="组件写法（about-vue）"><a href="#组件写法（about-vue）" class="headerlink" title="组件写法（about.vue）:"></a>组件写法（about.vue）:</h6><p><img src="/img/vueRouter/router6.png" alt="avatar"></p><h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二:"></a>方式二:</h5><p><img src="/img/vueRouter/router7.png" alt="avatar"></p><h5 id="路由写法："><a href="#路由写法：" class="headerlink" title="路由写法："></a>路由写法：</h5><p><img src="/img/vueRouter/router8.png" alt="avatar"></p><h5 id="接受写法："><a href="#接受写法：" class="headerlink" title="接受写法："></a>接受写法：</h5><p><img src="/img/vueRouter/router9.png" alt="avatar"></p><h5 id="页面渲染："><a href="#页面渲染：" class="headerlink" title="页面渲染："></a>页面渲染：</h5><p><img src="/img/vueRouter/router10.png" alt="avatar"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vue路由传参分为两种情况：&quot;&gt;&lt;a href=&quot;#vue路由传参分为两种情况：&quot; class=&quot;headerlink&quot; title=&quot;vue路由传参分为两种情况：&quot;&gt;&lt;/a&gt;vue路由传参分为两种情况：&lt;/h2&gt;&lt;h3 id=&quot;一、query和params传参的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【npm】前端如何配置不同镜像源：yarn cnpm</title>
    <link href="https://yokii-ry.github.io/2020/02/12/mirroring/"/>
    <id>https://yokii-ry.github.io/2020/02/12/mirroring/</id>
    <published>2020-02-12T02:13:07.000Z</published>
    <updated>2021-03-05T01:41:12.612Z</updated>
    
    <content type="html"><![CDATA[<p>  在装的过程中，使用npm有时候因为网络问题容易丢包，因此可配置一些镜像源进行优化，vue3好像也不能直接使用npm，只能使用yarn，整理了一些镜像源，推荐给大家，有错误希望能指出来，感恩。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-直接修改镜像源"><a href="#1-直接修改镜像源" class="headerlink" title="1.直接修改镜像源"></a>1.直接修改镜像源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　$ npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">　　$ npm config get registry</span><br></pre></td></tr></table></figure><h3 id="2-安装cnpm-不推荐使用"><a href="#2-安装cnpm-不推荐使用" class="headerlink" title="2.安装cnpm (不推荐使用)"></a>2.安装cnpm (不推荐使用)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="3-nrm-可选-如果已经做了第1步-就不需要设置了"><a href="#3-nrm-可选-如果已经做了第1步-就不需要设置了" class="headerlink" title="3.nrm (可选 如果已经做了第1步 就不需要设置了)"></a>3.nrm (可选 如果已经做了第1步 就不需要设置了)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm i nrm -g</span><br><span class="line"></span><br><span class="line">  $ nrm -V 验证版本</span><br><span class="line"></span><br><span class="line">  $ nrm ls | list 查看可切换镜像源</span><br><span class="line"></span><br><span class="line">  $ nrm use cnpm | npm | taobao taobao 是最快的 建议使用</span><br></pre></td></tr></table></figure><h3 id="4-yarn"><a href="#4-yarn" class="headerlink" title="4.yarn"></a>4.yarn</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$  npm i yarn -g</span><br><span class="line"></span><br><span class="line">       $ yarn -v</span><br><span class="line"></span><br><span class="line">       $ yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">       $ yarn config get registry</span><br><span class="line"></span><br><span class="line">       $ npm 常用命令</span><br><span class="line"></span><br><span class="line">       $ npm install 包名 -g | --save-dev(-D) --save(-S)</span><br><span class="line"></span><br><span class="line">       $ npm uninstall 包名 -g | --save-dev(-D) --save(-S)</span><br><span class="line"></span><br><span class="line">       $ yarn 常用命令</span><br><span class="line"></span><br><span class="line">       $ yarn add 包名 -g | --save-dev(-D) --save(-S)</span><br><span class="line"></span><br><span class="line">       $ yarn remove 包名 -g | --save-dev(-D) --save(-S)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  在装的过程中，使用npm有时候因为网络问题容易丢包，因此可配置一些镜像源进行优化，vue3好像也不能直接使用npm，只能使用yarn，整理了一些镜像源，推荐给大家，有错误希望能指出来，感恩。&lt;/p&gt;
&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
</feed>
